<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

return $this->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Sonata\\AdminBundle\\Form\\Type\\AdminType' => function () {
    return ($this->services['sonata.admin.form.type.admin'] ?? $this->services['sonata.admin.form.type.admin'] = new \Sonata\AdminBundle\Form\Type\AdminType());
}, 'Sonata\\AdminBundle\\Form\\Type\\ChoiceFieldMaskType' => function () {
    return ($this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask'] ?? $this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask'] = new \Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType());
}, 'Sonata\\AdminBundle\\Form\\Type\\CollectionType' => function () {
    return ($this->services['sonata.admin.form.type.collection'] ?? $this->services['sonata.admin.form.type.collection'] = new \Sonata\AdminBundle\Form\Type\CollectionType());
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\ChoiceType' => function () {
    return ($this->services['sonata.admin.form.filter.type.choice'] ?? $this->load('getSonata_Admin_Form_Filter_Type_ChoiceService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateRangeType' => function () {
    return ($this->services['sonata.admin.form.filter.type.daterange'] ?? $this->load('getSonata_Admin_Form_Filter_Type_DaterangeService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeRangeType' => function () {
    return ($this->services['sonata.admin.form.filter.type.datetime_range'] ?? $this->load('getSonata_Admin_Form_Filter_Type_DatetimeRangeService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeType' => function () {
    return ($this->services['sonata.admin.form.filter.type.datetime'] ?? $this->load('getSonata_Admin_Form_Filter_Type_DatetimeService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateType' => function () {
    return ($this->services['sonata.admin.form.filter.type.date'] ?? $this->load('getSonata_Admin_Form_Filter_Type_DateService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DefaultType' => function () {
    return ($this->services['sonata.admin.form.filter.type.default'] ?? $this->services['sonata.admin.form.filter.type.default'] = new \Sonata\AdminBundle\Form\Type\Filter\DefaultType());
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\NumberType' => function () {
    return ($this->services['sonata.admin.form.filter.type.number'] ?? $this->load('getSonata_Admin_Form_Filter_Type_NumberService.php'));
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelAutocompleteType' => function () {
    return ($this->services['sonata.admin.form.type.model_autocomplete'] ?? $this->services['sonata.admin.form.type.model_autocomplete'] = new \Sonata\AdminBundle\Form\Type\ModelAutocompleteType());
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelHiddenType' => function () {
    return ($this->services['sonata.admin.form.type.model_hidden'] ?? $this->services['sonata.admin.form.type.model_hidden'] = new \Sonata\AdminBundle\Form\Type\ModelHiddenType());
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelListType' => function () {
    return ($this->services['sonata.admin.form.type.model_list'] ?? $this->services['sonata.admin.form.type.model_list'] = new \Sonata\AdminBundle\Form\Type\ModelListType());
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelReferenceType' => function () {
    return ($this->services['sonata.admin.form.type.model_reference'] ?? $this->services['sonata.admin.form.type.model_reference'] = new \Sonata\AdminBundle\Form\Type\ModelReferenceType());
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelType' => function () {
    return ($this->services['sonata.admin.form.type.model_choice'] ?? $this->load('getSonata_Admin_Form_Type_ModelChoiceService.php'));
}, 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType' => function () {
    return ($this->privates['sonata.block.form.type.container_template'] ?? $this->privates['sonata.block.form.type.container_template'] = new \Sonata\BlockBundle\Form\Type\ContainerTemplateType(array('@SonataBlock/Block/block_container.html.twig' => 'SonataBlockBundle default template')));
}, 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType' => function () {
    return ($this->privates['sonata.block.form.type.block'] ?? $this->load('getSonata_Block_Form_Type_BlockService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\BooleanType' => function () {
    return ($this->privates['sonata.core.form.type.boolean'] ?? $this->privates['sonata.core.form.type.boolean'] = new \Sonata\CoreBundle\Form\Type\BooleanType());
}, 'Sonata\\CoreBundle\\Form\\Type\\CollectionType' => function () {
    return ($this->privates['sonata.core.form.type.collection'] ?? $this->privates['sonata.core.form.type.collection'] = new \Sonata\CoreBundle\Form\Type\CollectionType());
}, 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType' => function () {
    return ($this->privates['sonata.core.form.type.color_selector'] ?? $this->load('getSonata_Core_Form_Type_ColorSelectorService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\ColorType' => function () {
    return ($this->privates['sonata.core.form.type.color'] ?? $this->privates['sonata.core.form.type.color'] = new \Sonata\CoreBundle\Form\Type\ColorType());
}, 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType' => function () {
    return ($this->privates['sonata.core.form.type.date_picker'] ?? $this->load('getSonata_Core_Form_Type_DatePickerService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType' => function () {
    return ($this->privates['sonata.core.form.type.date_range_picker'] ?? $this->load('getSonata_Core_Form_Type_DateRangePickerService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType' => function () {
    return ($this->privates['sonata.core.form.type.date_range'] ?? $this->load('getSonata_Core_Form_Type_DateRangeService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType' => function () {
    return ($this->privates['sonata.core.form.type.datetime_picker'] ?? $this->load('getSonata_Core_Form_Type_DatetimePickerService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType' => function () {
    return ($this->privates['sonata.core.form.type.datetime_range_picker'] ?? $this->load('getSonata_Core_Form_Type_DatetimeRangePickerService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType' => function () {
    return ($this->privates['sonata.core.form.type.datetime_range'] ?? $this->load('getSonata_Core_Form_Type_DatetimeRangeService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\EqualType' => function () {
    return ($this->privates['sonata.core.form.type.equal'] ?? $this->load('getSonata_Core_Form_Type_EqualService.php'));
}, 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType' => function () {
    return ($this->privates['sonata.core.form.type.array'] ?? $this->privates['sonata.core.form.type.array'] = new \Sonata\CoreBundle\Form\Type\ImmutableArrayType());
}, 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType' => function () {
    return ($this->privates['sonata.core.form.type.translatable_choice'] ?? $this->load('getSonata_Core_Form_Type_TranslatableChoiceService.php'));
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ($this->privates['form.type.entity'] ?? $this->load('getForm_Type_EntityService.php'));
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ($this->privates['form.type.choice'] ?? $this->load('getForm_Type_ChoiceService.php'));
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ($this->privates['form.type.form'] ?? $this->load('getForm_Type_FormService.php'));
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService.php'));
    yield 1 => ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService.php'));
    yield 2 => ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService.php'));
    yield 3 => ($this->privates['form.type_extension.csrf'] ?? $this->load('getForm_TypeExtension_CsrfService.php'));
    yield 4 => ($this->privates['form.type_extension.form.data_collector'] ?? $this->load('getForm_TypeExtension_Form_DataCollectorService.php'));
    yield 5 => ($this->services['sonata.admin.form.extension.field'] ?? $this->load('getSonata_Admin_Form_Extension_FieldService.php'));
    yield 6 => ($this->services['sonata.admin.form.extension.field.mopa'] ?? $this->services['sonata.admin.form.extension.field.mopa'] = new \Sonata\AdminBundle\Form\Extension\Field\Type\MopaCompatibilityTypeFieldExtension());
}, 7), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.repeated.validator'] ?? $this->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension());
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.submit.validator'] ?? $this->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension());
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => new RewindableGenerator(function () {
    yield 0 => ($this->services['sonata.admin.form.extension.choice'] ?? $this->services['sonata.admin.form.extension.choice'] = new \Sonata\AdminBundle\Form\Extension\ChoiceTypeExtension());
}, 1)), new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService.php'));
    yield 1 => ($this->privates['form.type_guesser.doctrine'] ?? $this->load('getForm_TypeGuesser_DoctrineService.php'));
}, 2))), ($this->privates['form.resolved_type_factory'] ?? $this->load('getForm_ResolvedTypeFactoryService.php')));
